# 参考资料

## 多级缓存

SpringBoot+SpringCache实现两级缓存(Redis+Caffeine)：https://www.cnblogs.com/cnndevelop/p/13429660.html

基于Spring Cache实现二级缓存(Caffeine+Redis)：https://www.cnblogs.com/qdhxhz/p/16029596.html——业界已经存在封装了 Caffeine 和 Redis 的二级缓存组件

品味Spring Cache设计之美：https://zhuanlan.zhihu.com/p/444504022——Spring Cache不是一个具体的缓存实现方案，而是一个对缓存使用的抽象；Spring Cache并没有二级缓存的实现



Spring Boot缓存实战 Redis + Caffeine 实现多级缓存：https://www.jianshu.com/p/ef9042c068fd（重要）！！！



# Spring Cache

SpringBoot整合Spring Cache，简化分布式缓存开发：https://xiaoliang.blog.csdn.net/article/details/118794044——**缓存问题**：缓存穿透、击穿、雪崩

缓存使用的思考：https://juejin.cn/post/6844904016615309326——遇到一些稍微复杂的需求，仅仅依靠 Spring Cache 的注解是远远不够的，我们需要自己去操作 cache 对象。如果使用原生 API 就非常简单了，能应对不同的需求。







## Redis

SpringBoot整合Spring Cache，简化分布式缓存开发：https://xiaoliang.blog.csdn.net/article/details/118794044

SpringBoot整合Redis，一篇解决缓存的所有问题：https://xiaoliang.blog.csdn.net/article/details/118677483



SpringBoot整合Redis做缓存，实战分享：https://blog.csdn.net/singwhatiwanna/article/details/107194161



# Caffine

Caffeine 详解 —— Caffeine 使用：https://zhuanlan.zhihu.com/p/329684099——参数

Caffeine缓存：https://www.jianshu.com/p/9a80c662dac4——策略等

## 使用Caffine的两种方法

SpringBoot 使用 Caffeine 本地缓存 | 超级小豆丁 (mydlq.club)：http://www.mydlq.club/article/56/

### 第一种

#### config

```java
package com.example.config;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.concurrent.TimeUnit;

@Configuration
public class CaffeineCacheConfig {
    @Bean
    public Cache<String, Object> caffeineCache() {
        return Caffeine.newBuilder()
                // 设置最后一次写入或访问后经过固定时间过期
                .expireAfterWrite(60, TimeUnit.SECONDS)
                // 初始的缓存空间大小
                .initialCapacity(100)
                // 缓存的最大条数
                .maximumSize(100)
                .build();
    }
}
```

#### pom.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.7.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>org.example</groupId>
    <artifactId>CaffineCache</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-models -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
            <version>2.0.9</version>
        </dependency>
    </dependencies>

</project>
```

#### entity

```java
package com.example.entity;

import lombok.Data;
import lombok.ToString;

@Data
@ToString
public class UserInfo {
    private Integer id;
    private String name;
    private String sexual;
    private Integer age;
}
```

#### controller

```java
package com.example.controller;

import com.example.entity.UserInfo;
import com.example.service.UserInfoService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@Api(tags = "caffeine controller")
@RestController
@RequestMapping("/caffeine")
public class UserInfoController {
    @Autowired
    private UserInfoService userInfoService;

    @ApiOperation("get")
    @GetMapping("/userInfo")
    public UserInfo getUserInfoById(@RequestParam Integer id) {
        UserInfo userInfo = userInfoService.getUserInfoById(id);
        return userInfo;
    }

    @ApiOperation("add")
    @PostMapping("/add")
    public String addUserInfo(@RequestBody UserInfo userInfo) {
        userInfoService.addUserInfo(userInfo);
        return "Success";
    }

    @ApiOperation("update")
    @PostMapping("/update")
    public UserInfo updateUserInfo(@RequestBody UserInfo userInfo) {
        return userInfoService.updateUserInfo(userInfo);
    }

    @ApiOperation("delete")
    @GetMapping("/delete")
    public String deleteUserInfoById(@RequestParam Integer id) {
        userInfoService.deleteUserInfoById(id);
        return "SUCCESS";
    }
}
```

#### service

```java
package com.example.service;

import com.example.entity.UserInfo;

public interface UserInfoService {
    void addUserInfo(UserInfo userInfo);

    UserInfo getUserInfoById(Integer id);

    UserInfo updateUserInfo(UserInfo userInfo);

    void deleteUserInfoById(Integer id);
}

package com.example.service.impl;

import com.example.entity.UserInfo;
import com.example.service.UserInfoService;
import com.github.benmanes.caffeine.cache.Cache;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;

@Slf4j
@Service
public class UserInfoServiceImpl implements UserInfoService {

    /**
     * 模拟数据库存储数据
     */
    private HashMap<Integer, UserInfo> userInfoHashMap = new HashMap<>();

    /**
     * 使用 caffeineCache bean
     */
    @Autowired
    private Cache<String, Object> caffeineCache;

    @Override
    public void addUserInfo(UserInfo userInfo) {
        log.info("addUserInfo");
        userInfoHashMap.put(userInfo.getId(), userInfo);
        // 加入缓存中
        caffeineCache.put(String.valueOf(userInfo.getId()), userInfo);
    }

    @Override
    public UserInfo getUserInfoById(Integer id) {
        log.info("试图先从缓存中读取");
        // Object ifPresent = caffeineCache.getIfPresent(String.valueOf(id));
        UserInfo userInfo = (UserInfo) caffeineCache.asMap().get(String.valueOf(id));
        if (userInfo != null) {
            return userInfo;
        }

        // 如果缓存不存在，则从数据库中获取
        log.info("缓存中没有，则从数据库中获取");
        userInfo = userInfoHashMap.get(id);
        // 加入缓存中
        if (userInfo != null) {
            caffeineCache.put(String.valueOf(userInfo.getId()), userInfo);
        }
        return userInfo;
    }

    @Override
    public UserInfo updateUserInfo(UserInfo userInfo) {
        log.info("updateUserInfo");
        if (userInfoHashMap.containsKey(userInfo.getId())) {
            return null;
        }

        UserInfo oldUserInfo = userInfoHashMap.get(userInfo.getId());
        oldUserInfo.setAge(userInfo.getAge());
        oldUserInfo.setName(userInfo.getName());
        oldUserInfo.setSexual(userInfo.getSexual());
        userInfoHashMap.put(oldUserInfo.getId(), oldUserInfo);
        caffeineCache.put(String.valueOf(oldUserInfo.getId()), oldUserInfo);
        return oldUserInfo;
    }

    @Override
    public void deleteUserInfoById(Integer id) {
        log.info("deleteUserInfoById");
        if (caffeineCache.getIfPresent(String.valueOf(id)) != null) {
            userInfoHashMap.remove(id);
            // 从缓存中删除
            caffeineCache.asMap().remove(String.valueOf(id));
        }
    }
}
```

#### CaffeineApplication

```java
package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CaffeineApplication {
    public static void main(String[] args) {
        SpringApplication.run(CaffeineApplication.class, args);
    }
}
```



### 第二种

#### pom.xml

```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.7.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>org.example</groupId>
    <artifactId>SpringCaffeineCache</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>

        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-models -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter -->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
            <version>2.0.9</version>
        </dependency>
    </dependencies>

</project>
```

#### config

```java
package com.example.config;

import com.github.benmanes.caffeine.cache.Caffeine;
import org.springframework.cache.CacheManager;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.concurrent.TimeUnit;

@Configuration
public class CaffeineCacheConfig {
    @Bean("caffeineCacheManager")
    public CacheManager caffeineCacheManager() {
        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();
        caffeineCacheManager.setCaffeine(Caffeine.newBuilder()
                // 设置最后一次写入或访问后经过固定时间过期
                .expireAfterAccess(60, TimeUnit.SECONDS)
                // 初始的缓存空间大小
                .initialCapacity(100)
                // 缓存的最大条数
                .maximumSize(100));
        return caffeineCacheManager;
    }
}
```

#### controller

```java
package com.example.controller;

import com.example.entity.UserInfo;
import com.example.service.UserInfoService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@Api(tags = "SpringCacheCaffeine controller")
@RestController
@RequestMapping("/springCacheCaffeine")
public class UserInfoController {
    @Autowired
    private UserInfoService userInfoService;

    @ApiOperation("get")
    @GetMapping("/userInfo")
    public UserInfo getUserInfoById(@RequestParam Integer id) {
        UserInfo userInfo = userInfoService.getUserInfoById(id);
        return userInfo;
    }

    @ApiOperation("add")
    @PostMapping("/add")
    public UserInfo addUserInfo(@RequestBody UserInfo userInfo) {
        return userInfoService.addUserInfo(userInfo);
    }

    @ApiOperation("update")
    @PostMapping("/update")
    public UserInfo updateUserInfo(@RequestBody UserInfo userInfo) {
        return userInfoService.updateUserInfo(userInfo);
    }

    @ApiOperation("delete")
    @GetMapping("/delete")
    public String deleteUserInfoById(@RequestParam Integer id) {
        userInfoService.deleteUserInfoById(id);
        return "SUCCESS";
    }
}
```

#### entity

```java
package com.example.entity;

import lombok.Data;
import lombok.ToString;

@Data
@ToString
public class UserInfo {
    private Integer id;
    private String name;
    private String sexual;
    private Integer age;
}
```

#### service

```java
package com.example.service;

import com.example.entity.UserInfo;

public interface UserInfoService {
    UserInfo addUserInfo(UserInfo userInfo);

    UserInfo getUserInfoById(Integer id);

    UserInfo updateUserInfo(UserInfo userInfo);

    void deleteUserInfoById(Integer id);
}


package com.example.service.impl;

import com.example.entity.UserInfo;
import com.example.service.UserInfoService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.HashMap;

@Slf4j
@Service
public class UserInfoServiceImpl implements UserInfoService {

    /**
     * 模拟数据库存储数据
     */
    private HashMap<Integer, UserInfo> userInfoHashMap = new HashMap<>();


    @Override
    @CachePut(key = "#userInfo.id", value = "userInfo")
    public UserInfo addUserInfo(UserInfo userInfo) {
        log.info("addUserInfo");
        userInfoHashMap.put(userInfo.getId(), userInfo);
        return userInfo;
    }

    @Override
    @Cacheable(key = "#id", value = "userInfo")
    public UserInfo getUserInfoById(Integer id) {
        log.info("缓存中没有，则从数据库中获取");
        return userInfoHashMap.get(id);

    }

    @Override
    @CachePut(key = "#userInfo.id", value = "userInfo")
    public UserInfo updateUserInfo(UserInfo userInfo) {
        log.info("updateUserInfo");
        if (userInfoHashMap.containsKey(userInfo.getId())) {
            return null;
        }

        UserInfo oldUserInfo = userInfoHashMap.get(userInfo.getId());
        oldUserInfo.setAge(userInfo.getAge());
        oldUserInfo.setName(userInfo.getName());
        oldUserInfo.setSexual(userInfo.getSexual());
        userInfoHashMap.put(oldUserInfo.getId(), oldUserInfo);
        return oldUserInfo;
    }

    @Override
    @CacheEvict(key = "#id", value = "userInfo")
    public void deleteUserInfoById(Integer id) {
        log.info("deleteUserInfoById");
        userInfoHashMap.remove(id);
    }
}
```

#### SpringCacheCaffeineApplication

```java
package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cache.annotation.EnableCaching;

@SpringBootApplication
@EnableCaching
public class SpringCacheCaffeineApplication {
    public static void main(String[] args) {
        SpringApplication.run(SpringCacheCaffeineApplication.class, args);
    }
}
```





## Spring缓存注解@Cacheable,@CachePut , @CacheEvict使用

[SpringBoot如何集成Caffeine？ - SegmentFault 思否](https://segmentfault.com/a/1190000040912996)

[Spring Boot缓存注解@Cacheable、@CacheEvict、@CachePut使用_Dreamhai的博客-CSDN博客](https://blog.csdn.net/dreamhai/article/details/80642010)



